Sorted set create
	weight-balanced-tree (fromDistinctAscArray) x 1,421 ops/sec ±0.19% (99 runs sampled)
	Immutable.Set (constructor) x 493 ops/sec ±1.28% (90 runs sampled)
	mori (sortedSet) x 85.38 ops/sec ±0.23% (75 runs sampled)
	Fastest is weight-balanced-tree (fromDistinctAscArray)
Sorted set add
	weight-balanced-tree (insert) x 137 ops/sec ±0.37% (84 runs sampled)
	Immutable.Set (add) x 177 ops/sec ±1.09% (84 runs sampled)
	mori (conj) x 81.38 ops/sec ±0.24% (71 runs sampled)
	Fastest is Immutable.Set (add)
Sorted set has
	weight-balanced-tree (findBy) x 346 ops/sec ±0.80% (95 runs sampled)
	Immutable.Set (has) x 1,150 ops/sec ±0.14% (99 runs sampled)
	mori (hasKey) x 227 ops/sec ±5.35% (89 runs sampled)
	Fastest is Immutable.Set (has)
Sorted set remove
	weight-balanced-tree (remove) x 253 ops/sec ±0.24% (94 runs sampled)
	Immutable.Set (delete) x 170 ops/sec ±0.37% (88 runs sampled)
	mori (disj) x 65.67 ops/sec ±0.43% (69 runs sampled)
	Fastest is weight-balanced-tree (remove)
Sorted set union
	weight-balanced-tree (union) x 835 ops/sec ±0.13% (97 runs sampled)
	Immutable.Set (union) x 953 ops/sec ±1.02% (96 runs sampled)
	mori (into) x 169 ops/sec ±0.17% (88 runs sampled)
	Fastest is Immutable.Set (union)
Sorted set equals
	weight-balanced-tree (equals) x 861 ops/sec ±0.23% (99 runs sampled)
	Immutable.Set (equals) x 946 ops/sec ±0.10% (100 runs sampled)
	mori (equals) x 185 ops/sec ±0.12% (87 runs sampled)
	Fastest is Immutable.Set (equals)
Sorted set iteration
	weight-balanced-tree (iterate, Iterator protocol) x 1,571 ops/sec ±0.11% (100 runs sampled)
	Immutable.Set (toArray, sort, Iterator protocol) x 390 ops/sec ±0.33% (96 runs sampled)
	mori (Iterator protocol) x 721 ops/sec ±0.14% (97 runs sampled)
	Fastest is weight-balanced-tree (iterate, Iterator protocol)
